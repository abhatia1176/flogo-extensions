{
    "name": "customjson",
    "type": "flogo:function",
    "version": "1.2.0",
    "title": "custom json functions",
    "description": "custom json functions",
    "functions": [
      {
        "name": "removeFields",
        "author" : "Abhishek Bhatia",        
        "description": "Use JSONPath expressions to remove field values in a JSON object.",
        "example": "customjson.removeFields(\"{lead:{email:ab@test.com, password: iujajs, crmid:123}}\",[\"$.lead.email\",\"$.lead.password\"],1) => {lead:{crmid:123}}",
        "args": [
          {
            "name": "jsonObject",
            "type": "any",
            "valueType": "any"
          },
          {
            "name": "arrayOfJsonPathExpressions",
            "type": "array",
            "valueType": "string"
          }
        ],
        "return": {
          "type": "any",
          "valueType": "any"
        }
      },
      {
        "name": "removeNullFields",
        "author" : "Abhishek Bhatia",         
        "description": "This function removes fields which have null values, from the input json object. It expects a json object and returns a json object with null fields removed.\n// There is an optional second parameter (can be nil), where one can specify an array of strings,\n// where each string value represents name of an object array, ",
        "example": "customjson.removeNullFields({\"lead\":{\"key1\":null, \"key2\":123,\"arr1\":[\"\"]}},\"arr1\":[{\"name\":\"a\",\"value\":null},{\"name\":\"a\",\"value\":\"123\"}],false,false,false) => {\"lead\":{\"key2\":123,\"arr1\":[{\"name\":\"a\",\"value\":\"123\"}]}}",
        "args": [
          {
            "name": "jsonObject",
            "type": "any",
            "valueType": "any"
          },
          {
            "name": "arrayOfArrayNames",
            "type": "array",
            "valueType": "string"
          },
          {
            "name": "removeEmptyObjects",
            "type": "bool",
            "valueType": "bool"
          },
          {
            "name": "removeArrayIfAnyObjectFromArrayRemoved",
            "type": "bool",
            "valueType": "bool"
          },
          {
            "name": "treatEmptyAsNull",
            "type": "bool",
            "valueType": "bool"
          }
        ],
        "return": {
          "type": "any",
          "valueType": "any"
        } 
      },
      {
        "name": "setFieldValues",
        "description": "Use JSONPath expressions to set field values in a JSON object. There are three set operations available. Valid values are insert, update or upsert. Set fourth parameter to true to throw error if duplicate key is being inserted. Set fifth parameter to true to throw error if Key is not found for updating.",
        "example": "customjson.setFieldValues(\"{lead:{email:ab@test.com, password: iujajs, crmid:123}}\",[{\"name\":\"$.lead.email\",\"value\":\"pq@yopmail.com\"}],\"update\",false,false) => {lead:{email:pq@yopmail.com, password: iujajs, crmid:123}}",
        "args": [
          {
            "name": "jsonObj",
            "type": "any",
            "valueType": "any"
          },
          {
            "name": "arrayOfJSONPathExpressions",
            "type": "array",
            "valueType": "any"
          },
          {
            "name": "operation",
            "type": "string",
            "valueType": "string"
          },
          {
            "name": "throwErrorOnDupKeyInJson",
            "type": "bool",
            "valueType": "bool"
          },
          {
            "name": "throwErrorOnKeyNotInJson",
            "type": "bool",
            "valueType": "bool"
          }	
        ],
        "return": {
          "type": "any",
          "valueType": "any"
        }
      }           
    ]
  }
  